{"version":3,"sources":["components/Grid/Col.js","components/Grid/Container.js","components/Grid/Row.js","components/Form/Input.js","components/Thumbnail/index.js","components/EmployeeList/index.js","util/API.js","pages/Directory.js","App.js","reportWebVitals.js","index.js"],"names":["Col","size","children","className","split","map","join","Container","fluid","Row","Input","props","Thumbnail","src","role","aria-label","style","backgroundImage","EmployeeList","onClick","data-title","EmployeeListItem","image","firstName","lastName","phone","email","dob","axios","get","Directory","useState","employees","setEmployees","allEmployees","setAllEmployees","useEffect","API","then","res","employeeList","data","results","slice","catch","err","console","log","sortNames","array","length","pivot","splice","Math","floor","random","left","right","forEach","el","name","last","push","concat","sortPhones","sortEmails","sortDOB","date","formatDOB","day","Date","getDate","month","getMonth","year","getFullYear","onChange","event","value","target","filteredList","filter","item","toLowerCase","indexOf","placeholder","sortParam","getAttribute","employee","picture","large","first","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea57daa5.chunk.js","sourcesContent":["import React from \"react\";\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n","import React from \"react\";\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n","import React from \"react\";\n\nexport function Input(props) {\n  return (\n    <div className=\"form-group\">\n      <input className=\"form-control\" {...props} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./style.css\";\n\n// The Thumbnail component renders a div that uses some CSS to render a background image\n// It will always keep square proportions at any size without the image warping\n// The \"role\" and \"aria label\" are there to identify the element's purpose as an image for accessibility purposes\nfunction Thumbnail({ src }) {\n  return (\n    <div\n      className=\"thumbnail\"\n      role=\"img\"\n      aria-label=\"Employee Image\"\n      style={{\n        backgroundImage: `url(${src})`\n      }}\n    />\n  );\n}\n\nexport default Thumbnail;\n","import React from \"react\";\nimport Thumbnail from \"../Thumbnail\";\nimport { Container, Row, Col } from \"../Grid\";\n\nexport function EmployeeList({ children, onClick }) {\n  return (\n    <Container>\n      <Row>\n        <Col size=\"md-2\">\n          <h5>Image</h5>\n        </Col>\n        <Col size=\"md-2\">\n          <h5 className=\"sort\" data-title=\"name\" onClick={onClick}>Name</h5>\n        </Col>\n        <Col size=\"md-2\">\n          <h5 className=\"sort\" data-title=\"phone\" onClick={onClick}>Phone</h5>\n        </Col>\n        <Col size=\"md-4\">\n          <h5 className=\"sort\" data-title=\"email\" onClick={onClick}>Email</h5>\n        </Col>\n        <Col size=\"md-2\">\n          <h5 className=\"sort\" data-title=\"dob\" onClick={onClick}>DOB</h5>\n        </Col>\n      </Row>\n      <Row>\n        <Col size=\"md-12\">\n          {children}\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport function EmployeeListItem({\n  image,\n  firstName,\n  lastName,\n  phone,\n  email,\n  dob\n}) {\n  return (\n    <Container>\n      <Row>\n        <Col size=\"md-2\">\n          <Thumbnail src={image || \"https://placehold.it/300x300\"} />\n        </Col>\n        <Col size=\"md-2\">\n          <p>{firstName} {lastName}</p>\n        </Col>\n        <Col size=\"md-2\">\n          <p>{phone}</p>\n        </Col>\n        <Col size=\"md-4\">\n          <p>{email}</p>\n        </Col>\n        <Col size=\"md-2\">\n          <p>{dob}</p>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n","import axios from 'axios';\n\nexport default {\n  // Gets all employees\n  getEmployees: function () {\n    return axios.get('https://randomuser.me/api/?results=200&nat=us', {\n      \"crossdomain\": \"true\"\n    });\n  }\n};","import React, { useState, useEffect } from \"react\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { Input } from \"../components/Form\";\nimport { EmployeeList, EmployeeListItem } from \"../components/EmployeeList\";\nimport API from \"../util/API\";\n\nfunction Directory() {\n\n  const [employees, setEmployees] = useState([]);\n  const [allEmployees, setAllEmployees] = useState([]);\n\n  useEffect(() => {\n    API.getEmployees()\n      .then(res => {\n        let employeeList = res.data.results.slice(0, 10)\n        setEmployees(employeeList);\n        setAllEmployees(employeeList);\n      })\n      .catch(err => console.log(err))\n  }, []);\n\n  const sortNames = (array) => {\n    if (array.length <= 1) {\n      return array;\n    }\n\n    // get random pivot element (and remove from array to add back in later)\n    let pivot = array.splice(Math.floor(Math.random() * array.length), 1);\n\n    // create left array (elements <= pivot), and right array (elements > pivot)\n    let left = [];\n    let right = [];\n\n    array.forEach(function (el) {\n      if (el.name.last <= pivot[0].name.last) {\n        left.push(el);\n      }\n      else {\n        right.push(el);\n      }\n    });\n\n    // get the result of recursively sorting the left array (using quicksort), then join that with the pivot and the\n    // result of recursively sorting the right array (using quicksort).\n    // equivalent of `return quicksort(left) + pivot + quicksort (right);` in the pseudocode\n    return sortNames(left).concat(pivot, sortNames(right));\n  }\n\n  const sortPhones = (array) => {\n    if (array.length <= 1) {\n      return array;\n    }\n\n    // get random pivot element (and remove from array to add back in later)\n    let pivot = array.splice(Math.floor(Math.random() * array.length), 1);\n\n    // create left array (elements <= pivot), and right array (elements > pivot)\n    let left = [];\n    let right = [];\n\n    array.forEach(function (el) {\n      if (el.phone <= pivot[0].phone) {\n        left.push(el);\n      }\n      else {\n        right.push(el);\n      }\n    });\n\n    // get the result of recursively sorting the left array (using quicksort), then join that with the pivot and the\n    // result of recursively sorting the right array (using quicksort).\n    // equivalent of `return quicksort(left) + pivot + quicksort (right);` in the pseudocode\n    return sortPhones(left).concat(pivot, sortPhones(right));\n  }\n\n  const sortEmails = (array) => {\n    if (array.length <= 1) {\n      return array;\n    }\n\n    // get random pivot element (and remove from array to add back in later)\n    let pivot = array.splice(Math.floor(Math.random() * array.length), 1);\n\n    // create left array (elements <= pivot), and right array (elements > pivot)\n    let left = [];\n    let right = [];\n\n    array.forEach(function (el) {\n      if (el.email <= pivot[0].email) {\n        left.push(el);\n      }\n      else {\n        right.push(el);\n      }\n    });\n\n    // get the result of recursively sorting the left array (using quicksort), then join that with the pivot and the\n    // result of recursively sorting the right array (using quicksort).\n    // equivalent of `return quicksort(left) + pivot + quicksort (right);` in the pseudocode\n    return sortEmails(left).concat(pivot, sortEmails(right));\n  }\n\n  const sortDOB = (array) => {\n    if (array.length <= 1) {\n      return array;\n    }\n\n    // get random pivot element (and remove from array to add back in later)\n    let pivot = array.splice(Math.floor(Math.random() * array.length), 1);\n\n    // create left array (elements <= pivot), and right array (elements > pivot)\n    let left = [];\n    let right = [];\n\n    array.forEach(function (el) {\n      if (el.dob.date <= pivot[0].dob.date) {\n        left.push(el);\n      }\n      else {\n        right.push(el);\n      }\n    });\n\n    return sortDOB(left).concat(pivot, sortDOB(right));\n  }\n\n  const handleInputChange = event => {\n    const { value } = event.target;\n    const filteredList = employees.filter(item => {\n      let employeeLast = item.name.last.toLowerCase()\n      return employeeLast.indexOf(value.toLowerCase()) !== -1;\n    })\n    setEmployees(filteredList);\n\n    if (value === \"\") {\n      setEmployees(allEmployees);\n      console.log(employees);\n    }\n  };\n\n  const formatDOB = (date) => {\n    const day = new Date(date).getDate();\n    const month = new Date(date).getMonth() + 1;\n    const year = new Date(date).getFullYear();\n    return `${month}-${day}-${year}`\n  }\n\n  const handleSort = event => {\n    const sortParam = event.target.getAttribute(\"data-title\");\n    console.log(sortParam);\n    switch (sortParam) {\n      case \"name\":\n        setEmployees(sortNames(employees))\n        break;\n      case \"phone\":\n        setEmployees(sortPhones(employees))\n        break;\n      case \"email\":\n        setEmployees(sortEmails(employees))\n        break;\n      case \"dob\":\n        setEmployees(sortDOB(employees))\n        break;\n      default:\n        return\n    }\n\n  }\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col size=\"md-12\">\n          <h1>Employee Directory</h1>\n          <h4>Click on colomn titles to filter or use the search box to narrow your results</h4>\n        </Col>\n      </Row>\n      <Row>\n        <Col size=\"md-12\">\n          <form>\n            <Input\n              onChange={handleInputChange}\n              name=\"search\"\n              placeholder=\"Search by last name\"\n            />\n          </form>\n        </Col>\n      </Row>\n      <Row>\n        <Col size=\"md-12\">\n          {!employees.length ? (\n            <h1 className=\"text-center\">No Employees to Display</h1>\n          ) : (\n              <EmployeeList onClick={handleSort}>\n                {employees.map(employee => {\n                  return (\n                    <EmployeeListItem\n                      key={employee.phone}\n                      image={employee.picture.large}\n                      firstName={employee.name.first}\n                      lastName={employee.name.last}\n                      phone={employee.phone}\n                      email={employee.email}\n                      dob={formatDOB(employee.dob.date)}\n                    />\n                  );\n                })}\n              </EmployeeList>\n            )}\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default Directory;","import React from \"react\";\nimport Directory from \"./pages/Directory\";\n\nfunction App() {\n  return <Directory />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}