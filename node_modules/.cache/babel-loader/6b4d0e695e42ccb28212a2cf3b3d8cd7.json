{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/luke_shepherd/Desktop/Personal.code/uw-sea-fsf-pt-06-2020-u-c/19-React/02-Homework/employee-direactory/employee-react-app/src/pages/Directory.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { Input } from \"../components/Form\";\nimport { EmployeeList, EmployeeListItem } from \"../components/EmployeeList\";\nimport API from \"../util/API\";\n\nfunction Directory() {\n  _s();\n\n  const [searchState, setSearchState] = useState(\"\");\n  const [employees, setEmployees] = useState([]);\n  useEffect(() => {\n    API.getEmployees().then(res => setEmployees(res.data.results.slice(0, 10))).catch(err => console.log(err));\n  }, []);\n\n  const sortNames = array => {\n    if (array.length <= 1) {\n      return array;\n    } // get random pivot element (and remove from array to add back in later)\n\n\n    let pivot = array.splice(Math.floor(Math.random() * array.length), 1); // create left array (elements <= pivot), and right array (elements > pivot)\n\n    let left = [];\n    let right = [];\n    array.forEach(function (el) {\n      if (el.name.last <= pivot[0].name.last) {\n        left.push(el);\n      } else {\n        right.push(el);\n      }\n    }); // get the result of recursively sorting the left array (using quicksort), then join that with the pivot and the\n    // result of recursively sorting the right array (using quicksort).\n    // equivalent of `return quicksort(left) + pivot + quicksort (right);` in the pseudocode\n\n    return sortNames(left).concat(pivot, sortNames(right));\n  };\n\n  const sortPhones = array => {\n    if (array.length <= 1) {\n      return array;\n    } // get random pivot element (and remove from array to add back in later)\n\n\n    let pivot = array.splice(Math.floor(Math.random() * array.length), 1); // create left array (elements <= pivot), and right array (elements > pivot)\n\n    let left = [];\n    let right = [];\n    array.forEach(function (el) {\n      if (el.phone <= pivot[0].phone) {\n        left.push(el);\n      } else {\n        right.push(el);\n      }\n    }); // get the result of recursively sorting the left array (using quicksort), then join that with the pivot and the\n    // result of recursively sorting the right array (using quicksort).\n    // equivalent of `return quicksort(left) + pivot + quicksort (right);` in the pseudocode\n\n    return sortPhones(left).concat(pivot, sortPhones(right));\n  };\n\n  const sortEmails = array => {\n    if (array.length <= 1) {\n      return array;\n    } // get random pivot element (and remove from array to add back in later)\n\n\n    let pivot = array.splice(Math.floor(Math.random() * array.length), 1); // create left array (elements <= pivot), and right array (elements > pivot)\n\n    let left = [];\n    let right = [];\n    array.forEach(function (el) {\n      if (el.email <= pivot[0].email) {\n        left.push(el);\n      } else {\n        right.push(el);\n      }\n    }); // get the result of recursively sorting the left array (using quicksort), then join that with the pivot and the\n    // result of recursively sorting the right array (using quicksort).\n    // equivalent of `return quicksort(left) + pivot + quicksort (right);` in the pseudocode\n\n    return sortEmails(left).concat(pivot, sortEmails(right));\n  };\n\n  const sortDOB = array => {\n    if (array.length <= 1) {\n      return array;\n    } // get random pivot element (and remove from array to add back in later)\n\n\n    let pivot = array.splice(Math.floor(Math.random() * array.length), 1); // create left array (elements <= pivot), and right array (elements > pivot)\n\n    let left = [];\n    let right = [];\n    array.forEach(function (el) {\n      if (el.dob.date <= pivot[0].dob.date) {\n        left.push(el);\n      } else {\n        right.push(el);\n      }\n    });\n    return sortDOB(left).concat(pivot, sortDOB(right));\n  };\n\n  const binarySearch = (items, value) => {\n    var startIndex = 0,\n        stopIndex = items.length - 1,\n        middle = Math.floor((stopIndex + startIndex) / 2);\n\n    while (items[middle] !== value && startIndex < stopIndex) {\n      //adjust search area\n      if (value < items[middle]) {\n        stopIndex = middle - 1;\n      } else if (value > items[middle]) {\n        startIndex = middle + 1;\n      } //recalculate middle\n\n\n      middle = Math.floor((stopIndex + startIndex) / 2);\n    } //make sure it's the right value\n\n\n    return items[middle] !== value ? -1 : middle;\n  };\n\n  const handleInputChange = event => {\n    const {\n      value\n    } = event.target;\n    console.log(value);\n    setSearchState(value); // run binary search to see if searchState matches any of the names in employees; function should only look at the first 'x' amount of letters in the last name, with 'x' equal to searchState.length\n  };\n\n  const formatDOB = date => {\n    const day = new Date(date).getDate();\n    const month = new Date(date).getMonth() + 1;\n    const year = new Date(date).getFullYear();\n    return `${month}-${day}-${year}`;\n  };\n\n  const handleSort = event => {\n    const sortParam = event.target.getAttribute(\"data-title\");\n    console.log(sortParam);\n\n    switch (sortParam) {\n      case \"name\":\n        setEmployees(sortNames(employees));\n        break;\n\n      case \"phone\":\n        setEmployees(sortPhones(employees));\n        break;\n\n      case \"email\":\n        setEmployees(sortEmails(employees));\n        break;\n\n      case \"dob\":\n        setEmployees(sortDOB(employees));\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        size: \"md-12\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Employee Directory\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Click on carrots to filter by heading or use the search box to narrow your results\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        size: \"md-12\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            value: searchState,\n            onChange: handleInputChange,\n            name: \"search\",\n            placeholder: \"Search by last name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        size: \"md-12\",\n        children: !employees.length ? /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-center\",\n          children: \"No Employees to Display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(EmployeeList, {\n          onClick: handleSort,\n          children: employees.map(employee => {\n            return /*#__PURE__*/_jsxDEV(EmployeeListItem, {\n              thumbnail: employee.picture.thumbnail,\n              firstName: employee.name.first,\n              lastName: employee.name.last,\n              phone: employee.phone,\n              email: employee.email,\n              dob: formatDOB(employee.dob.date)\n            }, employee.phone, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Directory, \"T0TqMd5JPQyI+ucrzRsVmgOIMOI=\");\n\n_c = Directory;\nexport default Directory;\n\nvar _c;\n\n$RefreshReg$(_c, \"Directory\");","map":{"version":3,"sources":["/Users/luke_shepherd/Desktop/Personal.code/uw-sea-fsf-pt-06-2020-u-c/19-React/02-Homework/employee-direactory/employee-react-app/src/pages/Directory.js"],"names":["React","useState","useEffect","Col","Row","Container","Input","EmployeeList","EmployeeListItem","API","Directory","searchState","setSearchState","employees","setEmployees","getEmployees","then","res","data","results","slice","catch","err","console","log","sortNames","array","length","pivot","splice","Math","floor","random","left","right","forEach","el","name","last","push","concat","sortPhones","phone","sortEmails","email","sortDOB","dob","date","binarySearch","items","value","startIndex","stopIndex","middle","handleInputChange","event","target","formatDOB","day","Date","getDate","month","getMonth","year","getFullYear","handleSort","sortParam","getAttribute","map","employee","picture","thumbnail","first"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,QAAoC,oBAApC;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,4BAA/C;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,SAASC,SAAT,GAAqB;AAAA;;AAEnB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,GAAG,CAACM,YAAJ,GACGC,IADH,CACQC,GAAG,IAAIH,YAAY,CAACG,GAAG,CAACC,IAAJ,CAASC,OAAT,CAAiBC,KAAjB,CAAuB,CAAvB,EAA0B,EAA1B,CAAD,CAD3B,EAEGC,KAFH,CAESC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAFhB;AAGD,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMG,SAAS,GAAIC,KAAD,IAAW;AAC3B,QAAIA,KAAK,CAACC,MAAN,IAAgB,CAApB,EAAuB;AACrB,aAAOD,KAAP;AACD,KAH0B,CAK3B;;;AACA,QAAIE,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,KAAK,CAACC,MAAjC,CAAb,EAAuD,CAAvD,CAAZ,CAN2B,CAQ3B;;AACA,QAAIM,IAAI,GAAG,EAAX;AACA,QAAIC,KAAK,GAAG,EAAZ;AAEAR,IAAAA,KAAK,CAACS,OAAN,CAAc,UAAUC,EAAV,EAAc;AAC1B,UAAIA,EAAE,CAACC,IAAH,CAAQC,IAAR,IAAgBV,KAAK,CAAC,CAAD,CAAL,CAASS,IAAT,CAAcC,IAAlC,EAAwC;AACtCL,QAAAA,IAAI,CAACM,IAAL,CAAUH,EAAV;AACD,OAFD,MAGK;AACHF,QAAAA,KAAK,CAACK,IAAN,CAAWH,EAAX;AACD;AACF,KAPD,EAZ2B,CAqB3B;AACA;AACA;;AACA,WAAOX,SAAS,CAACQ,IAAD,CAAT,CAAgBO,MAAhB,CAAuBZ,KAAvB,EAA8BH,SAAS,CAACS,KAAD,CAAvC,CAAP;AACD,GAzBD;;AA2BA,QAAMO,UAAU,GAAIf,KAAD,IAAW;AAC5B,QAAIA,KAAK,CAACC,MAAN,IAAgB,CAApB,EAAuB;AACrB,aAAOD,KAAP;AACD,KAH2B,CAK5B;;;AACA,QAAIE,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,KAAK,CAACC,MAAjC,CAAb,EAAuD,CAAvD,CAAZ,CAN4B,CAQ5B;;AACA,QAAIM,IAAI,GAAG,EAAX;AACA,QAAIC,KAAK,GAAG,EAAZ;AAEAR,IAAAA,KAAK,CAACS,OAAN,CAAc,UAAUC,EAAV,EAAc;AAC1B,UAAIA,EAAE,CAACM,KAAH,IAAYd,KAAK,CAAC,CAAD,CAAL,CAASc,KAAzB,EAAgC;AAC9BT,QAAAA,IAAI,CAACM,IAAL,CAAUH,EAAV;AACD,OAFD,MAGK;AACHF,QAAAA,KAAK,CAACK,IAAN,CAAWH,EAAX;AACD;AACF,KAPD,EAZ4B,CAqB5B;AACA;AACA;;AACA,WAAOK,UAAU,CAACR,IAAD,CAAV,CAAiBO,MAAjB,CAAwBZ,KAAxB,EAA+Ba,UAAU,CAACP,KAAD,CAAzC,CAAP;AACD,GAzBD;;AA2BA,QAAMS,UAAU,GAAIjB,KAAD,IAAW;AAC5B,QAAIA,KAAK,CAACC,MAAN,IAAgB,CAApB,EAAuB;AACrB,aAAOD,KAAP;AACD,KAH2B,CAK5B;;;AACA,QAAIE,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,KAAK,CAACC,MAAjC,CAAb,EAAuD,CAAvD,CAAZ,CAN4B,CAQ5B;;AACA,QAAIM,IAAI,GAAG,EAAX;AACA,QAAIC,KAAK,GAAG,EAAZ;AAEAR,IAAAA,KAAK,CAACS,OAAN,CAAc,UAAUC,EAAV,EAAc;AAC1B,UAAIA,EAAE,CAACQ,KAAH,IAAYhB,KAAK,CAAC,CAAD,CAAL,CAASgB,KAAzB,EAAgC;AAC9BX,QAAAA,IAAI,CAACM,IAAL,CAAUH,EAAV;AACD,OAFD,MAGK;AACHF,QAAAA,KAAK,CAACK,IAAN,CAAWH,EAAX;AACD;AACF,KAPD,EAZ4B,CAqB5B;AACA;AACA;;AACA,WAAOO,UAAU,CAACV,IAAD,CAAV,CAAiBO,MAAjB,CAAwBZ,KAAxB,EAA+Be,UAAU,CAACT,KAAD,CAAzC,CAAP;AACD,GAzBD;;AA2BA,QAAMW,OAAO,GAAInB,KAAD,IAAW;AACzB,QAAIA,KAAK,CAACC,MAAN,IAAgB,CAApB,EAAuB;AACrB,aAAOD,KAAP;AACD,KAHwB,CAKzB;;;AACA,QAAIE,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,KAAK,CAACC,MAAjC,CAAb,EAAuD,CAAvD,CAAZ,CANyB,CAQzB;;AACA,QAAIM,IAAI,GAAG,EAAX;AACA,QAAIC,KAAK,GAAG,EAAZ;AAEAR,IAAAA,KAAK,CAACS,OAAN,CAAc,UAAUC,EAAV,EAAc;AAC1B,UAAIA,EAAE,CAACU,GAAH,CAAOC,IAAP,IAAenB,KAAK,CAAC,CAAD,CAAL,CAASkB,GAAT,CAAaC,IAAhC,EAAsC;AACpCd,QAAAA,IAAI,CAACM,IAAL,CAAUH,EAAV;AACD,OAFD,MAGK;AACHF,QAAAA,KAAK,CAACK,IAAN,CAAWH,EAAX;AACD;AACF,KAPD;AASA,WAAOS,OAAO,CAACZ,IAAD,CAAP,CAAcO,MAAd,CAAqBZ,KAArB,EAA4BiB,OAAO,CAACX,KAAD,CAAnC,CAAP;AACD,GAtBD;;AAwBA,QAAMc,YAAY,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACrC,QAAIC,UAAU,GAAG,CAAjB;AAAA,QACEC,SAAS,GAAGH,KAAK,CAACtB,MAAN,GAAe,CAD7B;AAAA,QAEE0B,MAAM,GAAGvB,IAAI,CAACC,KAAL,CAAW,CAACqB,SAAS,GAAGD,UAAb,IAA2B,CAAtC,CAFX;;AAIA,WAAOF,KAAK,CAACI,MAAD,CAAL,KAAkBH,KAAlB,IAA2BC,UAAU,GAAGC,SAA/C,EAA0D;AAExD;AACA,UAAIF,KAAK,GAAGD,KAAK,CAACI,MAAD,CAAjB,EAA2B;AACzBD,QAAAA,SAAS,GAAGC,MAAM,GAAG,CAArB;AACD,OAFD,MAEO,IAAIH,KAAK,GAAGD,KAAK,CAACI,MAAD,CAAjB,EAA2B;AAChCF,QAAAA,UAAU,GAAGE,MAAM,GAAG,CAAtB;AACD,OAPuD,CASxD;;;AACAA,MAAAA,MAAM,GAAGvB,IAAI,CAACC,KAAL,CAAW,CAACqB,SAAS,GAAGD,UAAb,IAA2B,CAAtC,CAAT;AACD,KAhBoC,CAkBrC;;;AACA,WAAQF,KAAK,CAACI,MAAD,CAAL,KAAkBH,KAAnB,GAA4B,CAAC,CAA7B,GAAiCG,MAAxC;AACD,GApBD;;AAsBA,QAAMC,iBAAiB,GAAGC,KAAK,IAAI;AACjC,UAAM;AAAEL,MAAAA;AAAF,QAAYK,KAAK,CAACC,MAAxB;AACAjC,IAAAA,OAAO,CAACC,GAAR,CAAY0B,KAAZ;AACAtC,IAAAA,cAAc,CAACsC,KAAD,CAAd,CAHiC,CAKjC;AACD,GAND;;AAQA,QAAMO,SAAS,GAAIV,IAAD,IAAU;AAC1B,UAAMW,GAAG,GAAG,IAAIC,IAAJ,CAASZ,IAAT,EAAea,OAAf,EAAZ;AACA,UAAMC,KAAK,GAAG,IAAIF,IAAJ,CAASZ,IAAT,EAAee,QAAf,KAA4B,CAA1C;AACA,UAAMC,IAAI,GAAG,IAAIJ,IAAJ,CAASZ,IAAT,EAAeiB,WAAf,EAAb;AACA,WAAQ,GAAEH,KAAM,IAAGH,GAAI,IAAGK,IAAK,EAA/B;AACD,GALD;;AAOA,QAAME,UAAU,GAAGV,KAAK,IAAI;AAC1B,UAAMW,SAAS,GAAGX,KAAK,CAACC,MAAN,CAAaW,YAAb,CAA0B,YAA1B,CAAlB;AACA5C,IAAAA,OAAO,CAACC,GAAR,CAAY0C,SAAZ;;AACA,YAAQA,SAAR;AACE,WAAK,MAAL;AACEpD,QAAAA,YAAY,CAACW,SAAS,CAACZ,SAAD,CAAV,CAAZ;AACA;;AACF,WAAK,OAAL;AACEC,QAAAA,YAAY,CAAC2B,UAAU,CAAC5B,SAAD,CAAX,CAAZ;AACA;;AACF,WAAK,OAAL;AACEC,QAAAA,YAAY,CAAC6B,UAAU,CAAC9B,SAAD,CAAX,CAAZ;AACA;;AACF,WAAK,KAAL;AACEC,QAAAA,YAAY,CAAC+B,OAAO,CAAChC,SAAD,CAAR,CAAZ;AACA;;AACF;AACE;AAdJ;AAiBD,GApBD;;AAsBA,sBACE,QAAC,SAAD;AAAW,IAAA,KAAK,MAAhB;AAAA,4BACE,QAAC,GAAD;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,IAAI,EAAC,OAAV;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAOE,QAAC,GAAD;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,IAAI,EAAC,OAAV;AAAA,+BACE;AAAA,iCACE,QAAC,KAAD;AACE,YAAA,KAAK,EAAEF,WADT;AAEE,YAAA,QAAQ,EAAE2C,iBAFZ;AAGE,YAAA,IAAI,EAAC,QAHP;AAIE,YAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAPF,eAmBE,QAAC,GAAD;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,IAAI,EAAC,OAAV;AAAA,kBACG,CAACzC,SAAS,CAACc,MAAX,gBACC;AAAI,UAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,gBAGG,QAAC,YAAD;AAAc,UAAA,OAAO,EAAEsC,UAAvB;AAAA,oBACGpD,SAAS,CAACuD,GAAV,CAAcC,QAAQ,IAAI;AACzB,gCACE,QAAC,gBAAD;AAEE,cAAA,SAAS,EAAEA,QAAQ,CAACC,OAAT,CAAiBC,SAF9B;AAGE,cAAA,SAAS,EAAEF,QAAQ,CAAChC,IAAT,CAAcmC,KAH3B;AAIE,cAAA,QAAQ,EAAEH,QAAQ,CAAChC,IAAT,CAAcC,IAJ1B;AAKE,cAAA,KAAK,EAAE+B,QAAQ,CAAC3B,KALlB;AAME,cAAA,KAAK,EAAE2B,QAAQ,CAACzB,KANlB;AAOE,cAAA,GAAG,EAAEa,SAAS,CAACY,QAAQ,CAACvB,GAAT,CAAaC,IAAd;AAPhB,eACOsB,QAAQ,CAAC3B,KADhB;AAAA;AAAA;AAAA;AAAA,oBADF;AAWD,WAZA;AADH;AAAA;AAAA;AAAA;AAAA;AAJN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6CD;;GA5NQhC,S;;KAAAA,S;AA8NT,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { Input } from \"../components/Form\";\nimport { EmployeeList, EmployeeListItem } from \"../components/EmployeeList\";\nimport API from \"../util/API\";\n\nfunction Directory() {\n\n  const [searchState, setSearchState] = useState(\"\");\n  const [employees, setEmployees] = useState([]);\n\n  useEffect(() => {\n    API.getEmployees()\n      .then(res => setEmployees(res.data.results.slice(0, 10)))\n      .catch(err => console.log(err))\n  }, []);\n\n  const sortNames = (array) => {\n    if (array.length <= 1) {\n      return array;\n    }\n\n    // get random pivot element (and remove from array to add back in later)\n    let pivot = array.splice(Math.floor(Math.random() * array.length), 1);\n\n    // create left array (elements <= pivot), and right array (elements > pivot)\n    let left = [];\n    let right = [];\n\n    array.forEach(function (el) {\n      if (el.name.last <= pivot[0].name.last) {\n        left.push(el);\n      }\n      else {\n        right.push(el);\n      }\n    });\n\n    // get the result of recursively sorting the left array (using quicksort), then join that with the pivot and the\n    // result of recursively sorting the right array (using quicksort).\n    // equivalent of `return quicksort(left) + pivot + quicksort (right);` in the pseudocode\n    return sortNames(left).concat(pivot, sortNames(right));\n  }\n\n  const sortPhones = (array) => {\n    if (array.length <= 1) {\n      return array;\n    }\n\n    // get random pivot element (and remove from array to add back in later)\n    let pivot = array.splice(Math.floor(Math.random() * array.length), 1);\n\n    // create left array (elements <= pivot), and right array (elements > pivot)\n    let left = [];\n    let right = [];\n\n    array.forEach(function (el) {\n      if (el.phone <= pivot[0].phone) {\n        left.push(el);\n      }\n      else {\n        right.push(el);\n      }\n    });\n\n    // get the result of recursively sorting the left array (using quicksort), then join that with the pivot and the\n    // result of recursively sorting the right array (using quicksort).\n    // equivalent of `return quicksort(left) + pivot + quicksort (right);` in the pseudocode\n    return sortPhones(left).concat(pivot, sortPhones(right));\n  }\n\n  const sortEmails = (array) => {\n    if (array.length <= 1) {\n      return array;\n    }\n\n    // get random pivot element (and remove from array to add back in later)\n    let pivot = array.splice(Math.floor(Math.random() * array.length), 1);\n\n    // create left array (elements <= pivot), and right array (elements > pivot)\n    let left = [];\n    let right = [];\n\n    array.forEach(function (el) {\n      if (el.email <= pivot[0].email) {\n        left.push(el);\n      }\n      else {\n        right.push(el);\n      }\n    });\n\n    // get the result of recursively sorting the left array (using quicksort), then join that with the pivot and the\n    // result of recursively sorting the right array (using quicksort).\n    // equivalent of `return quicksort(left) + pivot + quicksort (right);` in the pseudocode\n    return sortEmails(left).concat(pivot, sortEmails(right));\n  }\n\n  const sortDOB = (array) => {\n    if (array.length <= 1) {\n      return array;\n    }\n\n    // get random pivot element (and remove from array to add back in later)\n    let pivot = array.splice(Math.floor(Math.random() * array.length), 1);\n\n    // create left array (elements <= pivot), and right array (elements > pivot)\n    let left = [];\n    let right = [];\n\n    array.forEach(function (el) {\n      if (el.dob.date <= pivot[0].dob.date) {\n        left.push(el);\n      }\n      else {\n        right.push(el);\n      }\n    });\n\n    return sortDOB(left).concat(pivot, sortDOB(right));\n  }\n\n  const binarySearch = (items, value) => {\n    var startIndex = 0,\n      stopIndex = items.length - 1,\n      middle = Math.floor((stopIndex + startIndex) / 2);\n\n    while (items[middle] !== value && startIndex < stopIndex) {\n\n      //adjust search area\n      if (value < items[middle]) {\n        stopIndex = middle - 1;\n      } else if (value > items[middle]) {\n        startIndex = middle + 1;\n      }\n\n      //recalculate middle\n      middle = Math.floor((stopIndex + startIndex) / 2);\n    }\n\n    //make sure it's the right value\n    return (items[middle] !== value) ? -1 : middle;\n  }\n\n  const handleInputChange = event => {\n    const { value } = event.target;\n    console.log(value);\n    setSearchState(value);\n\n    // run binary search to see if searchState matches any of the names in employees; function should only look at the first 'x' amount of letters in the last name, with 'x' equal to searchState.length\n  };\n\n  const formatDOB = (date) => {\n    const day = new Date(date).getDate();\n    const month = new Date(date).getMonth() + 1;\n    const year = new Date(date).getFullYear();\n    return `${month}-${day}-${year}`\n  }\n\n  const handleSort = event => {\n    const sortParam = event.target.getAttribute(\"data-title\");\n    console.log(sortParam);\n    switch (sortParam) {\n      case \"name\":\n        setEmployees(sortNames(employees))\n        break;\n      case \"phone\":\n        setEmployees(sortPhones(employees))\n        break;\n      case \"email\":\n        setEmployees(sortEmails(employees))\n        break;\n      case \"dob\":\n        setEmployees(sortDOB(employees))\n        break;\n      default:\n        return\n    }\n\n  }\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col size=\"md-12\">\n          <h1>Employee Directory</h1>\n          <h4>Click on carrots to filter by heading or use the search box to narrow your results</h4>\n        </Col>\n      </Row>\n      <Row>\n        <Col size=\"md-12\">\n          <form>\n            <Input\n              value={searchState}\n              onChange={handleInputChange}\n              name=\"search\"\n              placeholder=\"Search by last name\"\n            />\n          </form>\n        </Col>\n      </Row>\n      <Row>\n        <Col size=\"md-12\">\n          {!employees.length ? (\n            <h1 className=\"text-center\">No Employees to Display</h1>\n          ) : (\n              <EmployeeList onClick={handleSort}>\n                {employees.map(employee => {\n                  return (\n                    <EmployeeListItem\n                      key={employee.phone}\n                      thumbnail={employee.picture.thumbnail}\n                      firstName={employee.name.first}\n                      lastName={employee.name.last}\n                      phone={employee.phone}\n                      email={employee.email}\n                      dob={formatDOB(employee.dob.date)}\n                    />\n                  );\n                })}\n              </EmployeeList>\n            )}\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default Directory;"]},"metadata":{},"sourceType":"module"}